contents
1. 顺序容器概述
2. 容器库概述
3. 顺序容器操作
4. vector对象是如何增长的
5. 额外的string操作
6. 容器适配器

1. 顺序容器概述
顺序容器：元素在容器中的顺序与其加入容器时的位置相对应。
关联容器：元素在容器中的位置由元素相关联的关键字值决定。（TODO）
1.1 顺序容器的类型
vector：可变大小数组。随机访问，尾部插入删除较快。
deque：双端队列。随机访问，头尾插入删除较快。
list：双向链表。双向顺序访问，任何位置插入删除都较快。
forward_list:单向链表。单向顺序访问，任何位置插入删除都较快。
array：固定大小数组。随机访问，不能添加或删除元素。
string：与vector相似的容器，但专门用来保存字符。随机访问，尾部插入删除较快。
*string和vector中的元素都是连续储存，因此每一次在序列中间位置删除或插入新元素之后都要移动该元素之后的所有元素（耗时）。
*list和forward_list设计目的是使在容器中的任何位置插入或删除元素都很快速，代价是不支持元素的随机访问，访问元素需要遍历整个容器。
1.2 顺序容器类型的选择
一般没有更好的理由，选择vector；
程序空间小元素多，额外空间开销很重要则不选list和forward_list；
要求随机访问，选择vector或deque；
需要在头尾部插入或删除元素，选择list或者forward_list；
*在不确定使用哪种容器，那么可以在程序中只使用vector和list的公共操作：使用迭代器，不使用下标操作，避免随机访问。

2. 容器库概述
